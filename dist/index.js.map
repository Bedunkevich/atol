{"version":3,"file":"index.js","sources":["../src/types.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["export type AtolResponce = { uuid: string };\n\nexport enum TaskResultStatus {\n  ready = 'ready',\n  error = 'error',\n  wait = 'wait',\n  inProgress = 'inProgress',\n  interrupted = 'interrupted',\n  blocked = 'blocked',\n  canceled = 'canceled',\n}\n\nexport type TaskResultResponce = {\n  results: {\n    error: {\n      code: number;\n      description: string;\n    };\n    status: TaskResultStatus;\n  }[];\n};\n\nexport type Session = {\n  operator: {\n    name: string;\n    vatin: string;\n  };\n};\n","import axios, { AxiosPromise } from 'axios';\nimport { v1 as timestampUUID } from 'uuid';\nimport {\n  Session,\n  AtolResponce,\n  TaskResultResponce,\n  TaskResultStatus,\n} from './types';\n\nconst DEFAULT_BASE_URL = 'http://127.0.0.1:16732';\n\nexport default (session: Session, baseURL: string = DEFAULT_BASE_URL) => {\n  const API = axios.create({\n    baseURL,\n    timeout: 1000,\n  });\n\n  const { operator } = session;\n\n  const post = (uuid: string, request: unknown): AxiosPromise<AtolResponce> => {\n    return API.post('/api/v2/request', { uuid, request });\n  };\n\n  const get = (uuid: string): AxiosPromise<TaskResultResponce> => {\n    return API.get(`/api/v2/request/${uuid}`);\n  };\n\n  const openShift = (): AxiosPromise<AtolResponce> => {\n    const uuid = timestampUUID();\n    return post(uuid, [\n      {\n        type: 'openShift',\n        operator,\n      },\n    ]);\n  };\n\n  const checkStatus = async (uuid: string): Promise<TaskResultStatus> => {\n    try {\n      const {\n        data: { results },\n      } = await get(uuid);\n      const status = results?.[0]?.status;\n\n      return status;\n    } catch (error) {\n      console.log(error);\n      return TaskResultStatus['error'];\n    }\n  };\n\n  return { openShift, checkStatus };\n};\n","import API from './api';\nimport type { Session } from './types';\n\nexport const init = ({\n  session,\n  baseUrl,\n}: {\n  session: Session;\n  baseUrl: string;\n}) => {\n  const api = API(session, baseUrl);\n  return api;\n};\n"],"names":["axios","uuid","timestampUUID"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAY,gBAQX;AARD,WAAY,gBAAgB;IAC1B,mCAAe,CAAA;IACf,mCAAe,CAAA;IACf,iCAAa,CAAA;IACb,6CAAyB,CAAA;IACzB,+CAA2B,CAAA;IAC3B,uCAAmB,CAAA;IACnB,yCAAqB,CAAA;AACvB,CAAC,EARW,gBAAgB,KAAhB,gBAAgB;;ACO5B,IAAM,gBAAgB,GAAG,wBAAwB,CAAC;AAElD,WAAe,UAAC,OAAgB,EAAE,OAAkC;IAAlC,wBAAA,EAAA,0BAAkC;IAClE,IAAM,GAAG,GAAGA,yBAAK,CAAC,MAAM,CAAC;QACvB,OAAO,SAAA;QACP,OAAO,EAAE,IAAI;KACd,CAAC,CAAC;IAEK,IAAA,QAAQ,GAAK,OAAO,SAAZ,CAAa;IAE7B,IAAM,IAAI,GAAG,UAAC,IAAY,EAAE,OAAgB;QAC1C,OAAO,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;KACvD,CAAC;IAEF,IAAM,GAAG,GAAG,UAAC,IAAY;QACvB,OAAO,GAAG,CAAC,GAAG,CAAC,qBAAmB,IAAM,CAAC,CAAC;KAC3C,CAAC;IAEF,IAAM,SAAS,GAAG;QAChB,IAAMC,MAAI,GAAGC,OAAa,EAAE,CAAC;QAC7B,OAAO,IAAI,CAACD,MAAI,EAAE;YAChB;gBACE,IAAI,EAAE,WAAW;gBACjB,QAAQ,UAAA;aACT;SACF,CAAC,CAAC;KACJ,CAAC;IAEF,IAAM,WAAW,GAAG,UAAO,IAAY;;;;;;;oBAI/B,qBAAM,GAAG,CAAC,IAAI,CAAC,EAAA;;oBADT,OAAO,GACb,CAAA,SAAe,cADF;oBAEX,iBAAS,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAG,CAAC,2CAAG,MAAM,CAAC;oBAEpC,sBAAO,QAAM,EAAC;;;oBAEd,OAAO,CAAC,GAAG,CAAC,OAAK,CAAC,CAAC;oBACnB,sBAAO,gBAAgB,CAAC,OAAO,CAAC,EAAC;;;;SAEpC,CAAC;IAEF,OAAO,EAAE,SAAS,WAAA,EAAE,WAAW,aAAA,EAAE,CAAC;AACpC,CAAC;;ICjDY,IAAI,GAAG,UAAC,EAMpB;QALC,OAAO,aAAA,EACP,OAAO,aAAA;IAKP,IAAM,GAAG,GAAG,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAClC,OAAO,GAAG,CAAC;AACb;;;;"}