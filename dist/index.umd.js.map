{"version":3,"file":"index.umd.js","sources":["../src/helpers.ts","../src/types.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["export const delay = (time: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, time));\n","import type { AxiosPromise } from 'axios';\n\nexport type AtolResponce = { uuid: string };\n\nexport enum TaskResultStatus {\n  ready = 'ready',\n  error = 'error',\n  wait = 'wait',\n  inProgress = 'inProgress',\n  interrupted = 'interrupted',\n  blocked = 'blocked',\n  canceled = 'canceled',\n}\n\nexport enum RequestTypes {\n  openShift = 'openShift',\n  closeShift = 'closeShift',\n}\n\nexport type TaskResultResponce = {\n  results: {\n    error: {\n      code: number;\n      description: string;\n    };\n    status: TaskResultStatus;\n  }[];\n};\n\nexport type Session = {\n  operator: {\n    name: string;\n    vatin: string;\n  };\n};\n\nexport type AtolDriverInterface = {\n  openShift: () => AxiosPromise<AtolResponce>;\n  closeShift: () => AxiosPromise<AtolResponce>;\n  checkStatus: (uuid: string, callIndex?: number) => Promise<TaskResultStatus>;\n};\n","import axios, { AxiosPromise } from 'axios';\nimport { v1 as timestampUUID } from 'uuid';\nimport { delay } from './helpers';\nimport {\n  Session,\n  AtolResponce,\n  TaskResultResponce,\n  TaskResultStatus,\n  RequestTypes,\n  AtolDriverInterface,\n} from './types';\n\nconst DEFAULT_BASE_URL = 'http://127.0.0.1:16732';\nconst MAX_CALLS = 3;\nconst DELAY_BETWEEN_CALLS = 500;\n\nexport default (\n  session: Session,\n  baseURL: string = DEFAULT_BASE_URL,\n): AtolDriverInterface => {\n  const API = axios.create({\n    baseURL,\n    timeout: 1000,\n  });\n\n  const { operator } = session;\n\n  const post = (uuid: string, request: unknown): AxiosPromise<AtolResponce> => {\n    return API.post('/api/v2/request', { uuid, request });\n  };\n\n  const get = (uuid: string): AxiosPromise<TaskResultResponce> => {\n    return API.get(`/api/v2/request/${uuid}`);\n  };\n\n  /*\n   * Открытие смены\n   */\n  const openShift = (): AxiosPromise<AtolResponce> => {\n    const uuid = timestampUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.openShift],\n        operator,\n      },\n    ]);\n  };\n\n  /*\n   * Закрытие смены\n   */\n  const closeShift = (): AxiosPromise<AtolResponce> => {\n    const uuid = timestampUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.closeShift],\n        operator,\n      },\n    ]);\n  };\n\n  const checkStatus = async (\n    uuid: string,\n    callIndex = 0,\n  ): Promise<TaskResultStatus> => {\n    try {\n      const {\n        data: { results },\n      } = await get(uuid);\n      const status = results?.[0]?.status;\n\n      if (callIndex >= MAX_CALLS) {\n        throw new Error('MAX_CALLS LIMIT!');\n      }\n\n      if (status !== TaskResultStatus['ready']) {\n        await delay(DELAY_BETWEEN_CALLS);\n        return checkStatus(uuid, callIndex + 1);\n      }\n      return status;\n    } catch (error) {\n      return TaskResultStatus['error'];\n    }\n  };\n\n  return { openShift, closeShift, checkStatus };\n};\n","import API from './api';\nimport type { Session, AtolDriverInterface } from './types';\n\nexport const init = ({\n  session,\n  baseUrl,\n}: {\n  session: Session;\n  baseUrl: string;\n}): AtolDriverInterface => API(session, baseUrl);\n"],"names":["axios","uuid","timestampUUID"],"mappings":"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"}