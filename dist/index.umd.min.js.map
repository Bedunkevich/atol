{"version":3,"file":"index.umd.min.js","sources":["../src/types.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["export type AtolResponce = { uuid: string };\n\nexport enum TaskResultStatus {\n  ready = 'ready',\n  error = 'error',\n  wait = 'wait',\n  inProgress = 'inProgress',\n  interrupted = 'interrupted',\n  blocked = 'blocked',\n  canceled = 'canceled',\n}\n\nexport type TaskResultResponce = {\n  results: {\n    error: {\n      code: number;\n      description: string;\n    };\n    status: TaskResultStatus;\n  }[];\n};\n\nexport type Session = {\n  operator: {\n    name: string;\n    vatin: string;\n  };\n};\n","import axios, { AxiosPromise } from 'axios';\nimport { v1 as timestampUUID } from 'uuid';\nimport {\n  Session,\n  AtolResponce,\n  TaskResultResponce,\n  TaskResultStatus,\n} from './types';\n\nconst DEFAULT_BASE_URL = 'http://127.0.0.1:16732';\n\nexport default (session: Session, baseURL: string = DEFAULT_BASE_URL) => {\n  const API = axios.create({\n    baseURL,\n    timeout: 1000,\n  });\n\n  const { operator } = session;\n\n  const post = (uuid: string, request: unknown): AxiosPromise<AtolResponce> => {\n    return API.post('/api/v2/request', { uuid, request });\n  };\n\n  const get = (uuid: string): AxiosPromise<TaskResultResponce> => {\n    return API.get(`/api/v2/request/${uuid}`);\n  };\n\n  const openShift = (): AxiosPromise<AtolResponce> => {\n    const uuid = timestampUUID();\n    return post(uuid, [\n      {\n        type: 'openShift',\n        operator,\n      },\n    ]);\n  };\n\n  const checkStatus = async (uuid: string): Promise<TaskResultStatus> => {\n    try {\n      const {\n        data: { results },\n      } = await get(uuid);\n      const status = results?.[0]?.status;\n\n      return status;\n    } catch (error) {\n      console.log(error);\n      return TaskResultStatus['error'];\n    }\n  };\n\n  return { openShift, checkStatus };\n};\n","import API from './api';\nimport type { Session } from './types';\n\nexport const init = ({\n  session,\n  baseUrl,\n}: {\n  session: Session;\n  baseUrl: string;\n}) => {\n  const api = API(session, baseUrl);\n  return api;\n};\n"],"names":["TaskResultStatus","session","baseURL","API","axios","create","timeout","operator","get","uuid","openShift","request","post","timestampUUID","type","checkStatus","results","_b","status","console","log","error_1","_a","baseUrl"],"mappings":";;;;;2XAEYA;;;;;;;;;;;;;;g6CAAZ,SAAYA,GACVA,gBACAA,gBACAA,cACAA,0BACAA,4BACAA,oBACAA,sBAPF,CAAYA,IAAAA,OCOZ,eAEgBC,EAAkBC,gBAAAA,EAFT,0BAGvB,IAAMC,EAAMC,UAAMC,OAAO,CACvBH,UACAI,QAAS,MAGHC,EAAaN,WAMfO,EAAM,SAACC,GACX,OAAON,EAAIK,IAAI,mBAAmBC,IA2BpC,MAAO,CAAEC,UAxBS,WAEhB,OAVW,SAACD,EAAcE,GAC1B,OAAOR,EAAIS,KAAK,kBAAmB,CAAEH,OAAME,YASpCC,CADMC,OACK,CAChB,CACEC,KAAM,YACNP,eAmBcQ,YAdA,SAAON,yGAInB,gCAAMD,EAAIC,WAGd,OAJUO,EACNC,mCACWD,MAAAA,SAAAA,EAAU,yBAAIE,eAK7B,kBADAC,QAAQC,IAAIC,MACLrB,EAAwB,yCC5CjB,SAACsB,OACnBrB,YACAsB,YAMA,OADYpB,EAAIF,EAASsB"}