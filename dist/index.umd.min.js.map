{"version":3,"file":"index.umd.min.js","sources":["../src/uuid/rng.ts","../src/uuid/regex.ts","../src/uuid/stringify.ts","../src/uuid/index.ts","../src/uuid/validate.ts","../src/helpers.ts","../src/types.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\n\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.getRandomValues(rnds8Pool);\n    poolPtr = 0;\n  }\n  return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n","import validate from './validate';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex: any = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr: any, offset = 0): string {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (\n    byteToHex[arr[offset + 0]] +\n    byteToHex[arr[offset + 1]] +\n    byteToHex[arr[offset + 2]] +\n    byteToHex[arr[offset + 3]] +\n    '-' +\n    byteToHex[arr[offset + 4]] +\n    byteToHex[arr[offset + 5]] +\n    '-' +\n    byteToHex[arr[offset + 6]] +\n    byteToHex[arr[offset + 7]] +\n    '-' +\n    byteToHex[arr[offset + 8]] +\n    byteToHex[arr[offset + 9]] +\n    '-' +\n    byteToHex[arr[offset + 10]] +\n    byteToHex[arr[offset + 11]] +\n    byteToHex[arr[offset + 12]] +\n    byteToHex[arr[offset + 13]] +\n    byteToHex[arr[offset + 14]] +\n    byteToHex[arr[offset + 15]]\n  ).toLowerCase();\n\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;\n","import rng from './rng';\nimport stringify from './stringify';\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId: unknown;\nlet _clockseq: unknown;\n\n// Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options?: any, buf?: any, offset?: any) {\n  let i = (buf && offset) || 0;\n  const b = buf || new Array(16);\n\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1],\n        seedBytes[2],\n        seedBytes[3],\n        seedBytes[4],\n        seedBytes[5],\n      ];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = (clockseq + 1) & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = (tl >>> 24) & 0xff;\n  b[i++] = (tl >>> 16) & 0xff;\n  b[i++] = (tl >>> 8) & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;\n  b[i++] = (tmh >>> 8) & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = ((tmh >>> 24) & 0xf) | 0x10; // include version\n  b[i++] = (tmh >>> 16) & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = (clockseq >>> 8) | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport { v1 };\n","import REGEX from './regex';\n\nfunction validate(uuid: string): boolean {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;\n","export const delay = (time: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, time));\n","import type { AxiosPromise } from 'axios';\n\ndeclare global {\n  interface Window {\n    ajv7: {\n      default: any;\n    };\n  }\n}\n\nexport type TaskResponce =\n  | { uuid: string; number: number; isBlocked: boolean; blockedUUID: string }\n  | {\n      error: {\n        code: number;\n        description: string;\n      };\n    };\n\nexport enum TaskResultStatus {\n  ready = 'ready',\n  error = 'error',\n  wait = 'wait',\n  inProgress = 'inProgress',\n  interrupted = 'interrupted',\n  blocked = 'blocked',\n  canceled = 'canceled',\n}\n\nexport enum RequestTypes {\n  openShift = 'openShift',\n  closeShift = 'closeShift',\n  cashIn = 'cashIn',\n  cashOut = 'cashOut',\n  sell = 'sell',\n  sellReturn = 'sellReturn',\n  buy = 'buy',\n  buyReturn = 'buyReturn',\n  reportX = 'reportX',\n}\n\nexport type TaxationType =\n  | 'osn' // общая\n  | 'usnIncome' // упрощенная (Доход)\n  | 'usnIncomeOutcome' // упрощенная (Доход минус Расход)\n  | 'envd' // единый налог на вмененный доход\n  | 'esn' // единый сельскохозяйственный налог\n  | 'patent'; // патентная система налогообложения\n\nexport type TaskResultResponce = {\n  results: {\n    error: {\n      code: number;\n      description: string;\n    };\n    status: TaskResultStatus;\n  }[];\n};\n\nexport type Session = {\n  taxationType: TaxationType;\n  operator: {\n    name: string;\n    vatin?: string; // ИНН оператора\n  };\n};\n\nexport type PositionTax =\n  | 'none' // без НДС\n  | 'vat0' // НДС 0%\n  | 'vat10' // НДС 10%\n  | 'vat110' // НДС 10/110\n  | 'vat18' // НДС 18%\n  | 'vat118' // НДС 18/118%\n  | 'vat20' // НДС 20%\n  | 'vat120'; // НДС 20/120%\n\nexport type Item = {\n  type: 'position';\n  name: string; // Наименование\n  price: number; // Цена за единицу товара\n  quantity: number; // Количество товара\n  amount: number; // Сумма позиции\n  infoDiscountSum?: number; // Информационная скидка. Не влияет на сумму позиции, остальные параметры должны передаваться с учетом её.\n  tax: {\n    type: PositionTax;\n    sum?: number; // Сумма налога\n  };\n  paymentMethod?:\n    | 'fullPrepayment' // По умолчанию: предоплата 100%\n    | 'prepayment' // предоплата\n    | 'advance' // аванс\n    | 'fullPayment' // полный расчет\n    | 'partialPayment' // частичный расчет и кредит\n    | 'credit' // передача в кредит\n    | 'creditPayment'; // оплата кредита\n  paymentObject?: 'commodity' | 'excise' | 'job' | 'service'; // По умолчанию: commodity\n  department?: number; // Отдел / секция. По умолчанию: 1\n  markingCode: {\n    type?: 'other' | 'egais20' | 'egais30'; // Тип марки. По умолчанию: other\n    mark: string; // base64-представление кода маркировки\n  };\n};\n\nexport type Payment = {\n  type:\n    | 'cash' // наличными\n    | 'electronicaly' // безналичными\n    | 'prepaid' // предварительная оплата (аванс)\n    | 'credir' // последующая оплата (кредит)\n    | 'other'; // иная форма оплаты (встречное предоставление)\n  sum: number;\n};\n\nexport type MinimumArray<T> = [T, ...T[]];\n\nexport type Sell = {\n  items: MinimumArray<Item>;\n  payments: MinimumArray<Payment>;\n  total?: number; // Итог чека. Может отличаться от суммы позиций на значение,\n  // равное копейкам чека. Если не задан - высчитывается автоматически из суммы всех позиций\n};\n\nexport type SellRequest = { type: RequestTypes } & Session & Sell;\n\nexport type AtolDriverInterface = {\n  openShift: () => Promise<AxiosPromise<TaskResponce>>;\n  closeShift: () => AxiosPromise<TaskResponce>;\n  cashIn: (sum: number) => AxiosPromise<TaskResponce>;\n  cashOut: (sum: number) => AxiosPromise<TaskResponce>;\n  sell: (data: Sell) => AxiosPromise<TaskResponce>;\n  reportX: () => AxiosPromise<TaskResponce>;\n  checkStatus: (uuid: string, callIndex?: number) => Promise<TaskResultStatus>;\n};\n","import axios, { AxiosPromise } from 'axios';\nimport SessionSchema from './validation/Session.json';\nimport { v1 as buildUUID } from './uuid';\nimport { delay } from './helpers';\nimport {\n  Session,\n  TaskResponce,\n  TaskResultResponce,\n  TaskResultStatus,\n  RequestTypes,\n  AtolDriverInterface,\n  Sell,\n  SellRequest,\n} from './types';\n\nconst DEFAULT_BASE_URL = 'http://127.0.0.1:16732';\nconst MAX_CALLS = 3;\nconst DELAY_BETWEEN_CALLS = 1000;\n\nlet ajv: any;\n\nif (window.ajv7) {\n  const Ajv = window.ajv7.default;\n\n  ajv = new Ajv({\n    allErrors: true,\n    removeAdditional: true,\n    useDefaults: true,\n  });\n}\n\nexport default (\n  session: Session,\n  baseURL: string = DEFAULT_BASE_URL,\n): AtolDriverInterface => {\n  const API = axios.create({\n    baseURL,\n    timeout: 1000,\n  });\n\n  if (window.ajv7) {\n    const validate = ajv.compile(SessionSchema);\n\n    if (!validate(session)) {\n      console.log(\n        '%c[ATOL] [validation]',\n        'color:red',\n        ajv.errorsText(validate.errors),\n      );\n      throw new Error(ajv.errorsText(validate.errors));\n    }\n  }\n\n  const { operator, taxationType } = session;\n\n  const post = <T = unknown>(\n    uuid: string,\n    request: T,\n  ): AxiosPromise<TaskResponce> => {\n    return API.post('/api/v2/request', { uuid, request });\n  };\n\n  const get = (uuid: string): AxiosPromise<TaskResultResponce> => {\n    return API.get(`/api/v2/request/${uuid}`);\n  };\n\n  /*\n   * Открытие смены\n   */\n  const openShift = async (): Promise<AxiosPromise<TaskResponce>> => {\n    const uuid = buildUUID();\n    console.log(`%c[ATOL] [openShift] ${uuid}`, 'color:green');\n    try {\n      const responce = await post(uuid, [\n        {\n          type: RequestTypes[RequestTypes.openShift],\n          operator,\n        },\n      ]);\n      console.log(`%c[ATOL] [openShift] SUCCESS`, 'color:green', responce.data);\n      return responce;\n    } catch (error) {\n      console.log(\n        `%c[ATOL] [openShift] FAIL`,\n        'color:red',\n        error.response.data,\n      );\n      return error;\n    }\n  };\n\n  /*\n   * Закрытие смены\n   */\n  const closeShift = (): AxiosPromise<TaskResponce> => {\n    const uuid = buildUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.closeShift],\n        operator,\n      },\n    ]);\n  };\n\n  /*\n   * X-отчет\n   */\n  const reportX = (): AxiosPromise<TaskResponce> => {\n    const uuid = buildUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.reportX],\n        operator,\n      },\n    ]);\n  };\n\n  /*\n   * Внесение наличных\n   */\n  const cashIn = (cashSum: number): AxiosPromise<TaskResponce> => {\n    const uuid = buildUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.cashIn],\n        operator,\n      },\n      cashSum,\n    ]);\n  };\n\n  /*\n   * Выплата наличных\n   */\n  const cashOut = (cashSum: number): AxiosPromise<TaskResponce> => {\n    const uuid = buildUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.cashOut],\n        operator,\n      },\n      cashSum,\n    ]);\n  };\n\n  /*\n   * Чек прихода – продажа\n   */\n  const sell = (data: Sell): AxiosPromise<TaskResponce> => {\n    const uuid = buildUUID();\n    return post<SellRequest[]>(uuid, [\n      {\n        type: RequestTypes[RequestTypes.sell],\n        taxationType,\n        operator,\n        ...data,\n      },\n    ]);\n  };\n\n  /*\n   * Проверка статуса задания\n   */\n  const checkStatus = async (\n    uuid: string,\n    callIndex = 0,\n  ): Promise<TaskResultStatus> => {\n    try {\n      const {\n        data: { results },\n      } = await get(uuid);\n      const status = results?.[0]?.status;\n      console.log('%c[ATOL] [checkStatus]', 'color:green', results);\n\n      if (callIndex >= MAX_CALLS) {\n        throw new Error('MAX_CALLS LIMIT!');\n      }\n\n      if (status !== TaskResultStatus['ready']) {\n        await delay(DELAY_BETWEEN_CALLS);\n        return checkStatus(uuid, callIndex + 1);\n      }\n      return status;\n    } catch (error) {\n      console.log('%c[ATOL] [checkStatus]', 'color:red', error.message);\n\n      if (callIndex >= MAX_CALLS) {\n        throw new Error('MAX_CALLS LIMIT!');\n      }\n\n      await delay(DELAY_BETWEEN_CALLS);\n      return checkStatus(uuid, callIndex + 1);\n    }\n  };\n\n  return { openShift, closeShift, cashIn, cashOut, sell, reportX, checkStatus };\n};\n","import API from './api';\nimport type { Session, AtolDriverInterface } from './types';\n\nexport const init = ({\n  session,\n  baseUrl,\n}: {\n  session: Session;\n  baseUrl: string;\n}): AtolDriverInterface => API(session, baseUrl);\n"],"names":["rnds8Pool","Uint8Array","poolPtr","length","rng","crypto","getRandomValues","slice","_nodeId","_clockseq","byteToHex","i","push","toString","substr","stringify","arr","offset","uuid","toLowerCase","REGEX","test","validate","TypeError","_lastMSecs","_lastNSecs","v1","options","buf","b","Array","node","clockseq","undefined","seedBytes","random","msecs","Date","now","nsecs","dt","Error","tl","tmh","n","TaskResultStatus","RequestTypes","delay","time","Promise","resolve","setTimeout","ajv","window","ajv7","Ajv","default","allErrors","removeAdditional","useDefaults","_a","session","baseURL","API","axios","create","timeout","compile","SessionSchema","console","log","errorsText","errors","operator","taxationType","post","request","get","checkStatus","callIndex","results","_b","status_1","status","error_2","message","openShift","buildUUID","type","responce","data","error_1","response","closeShift","cashIn","cashSum","cashOut","sell","reportX"],"mappings":"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"}