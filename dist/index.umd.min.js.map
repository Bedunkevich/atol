{"version":3,"file":"index.umd.min.js","sources":["../src/uuid/rng.ts","../src/uuid/regex.ts","../src/uuid/stringify.ts","../src/uuid/index.ts","../src/uuid/validate.ts","../src/helpers.ts","../src/types.ts","../src/index.ts","../src/api.ts"],"sourcesContent":["const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\nlet poolPtr = rnds8Pool.length;\n\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.getRandomValues(rnds8Pool);\n    poolPtr = 0;\n  }\n  return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n","import validate from './validate';\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex: any = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr: any, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (\n    byteToHex[arr[offset + 0]] +\n    byteToHex[arr[offset + 1]] +\n    byteToHex[arr[offset + 2]] +\n    byteToHex[arr[offset + 3]] +\n    '-' +\n    byteToHex[arr[offset + 4]] +\n    byteToHex[arr[offset + 5]] +\n    '-' +\n    byteToHex[arr[offset + 6]] +\n    byteToHex[arr[offset + 7]] +\n    '-' +\n    byteToHex[arr[offset + 8]] +\n    byteToHex[arr[offset + 9]] +\n    '-' +\n    byteToHex[arr[offset + 10]] +\n    byteToHex[arr[offset + 11]] +\n    byteToHex[arr[offset + 12]] +\n    byteToHex[arr[offset + 13]] +\n    byteToHex[arr[offset + 14]] +\n    byteToHex[arr[offset + 15]]\n  ).toLowerCase();\n\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;\n","import rng from './rng';\nimport stringify from './stringify';\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId: any;\nlet _clockseq: any;\n\n// Previous uuid creation time\nlet _lastMSecs = 0;\nlet _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options?: any, buf?: any, offset?: any) {\n  let i = (buf && offset) || 0;\n  const b = buf || new Array(16);\n\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1],\n        seedBytes[2],\n        seedBytes[3],\n        seedBytes[4],\n        seedBytes[5],\n      ];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = (clockseq + 1) & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = (tl >>> 24) & 0xff;\n  b[i++] = (tl >>> 16) & 0xff;\n  b[i++] = (tl >>> 8) & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  const tmh = ((msecs / 0x100000000) * 10000) & 0xfffffff;\n  b[i++] = (tmh >>> 8) & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = ((tmh >>> 24) & 0xf) | 0x10; // include version\n  b[i++] = (tmh >>> 16) & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = (clockseq >>> 8) | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport { v1 };\n","import REGEX from './regex';\n\nfunction validate(uuid: any) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;\n","export const delay = (time: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, time));\n","import type { AxiosPromise } from 'axios';\n\nexport type AtolResponce = { uuid: string };\n\nexport enum TaskResultStatus {\n  ready = 'ready',\n  error = 'error',\n  wait = 'wait',\n  inProgress = 'inProgress',\n  interrupted = 'interrupted',\n  blocked = 'blocked',\n  canceled = 'canceled',\n}\n\nexport enum RequestTypes {\n  openShift = 'openShift',\n  closeShift = 'closeShift',\n}\n\nexport type TaskResultResponce = {\n  results: {\n    error: {\n      code: number;\n      description: string;\n    };\n    status: TaskResultStatus;\n  }[];\n};\n\nexport type Session = {\n  operator: {\n    name: string;\n    vatin: string;\n  };\n};\n\nexport type AtolDriverInterface = {\n  openShift: () => AxiosPromise<AtolResponce>;\n  closeShift: () => AxiosPromise<AtolResponce>;\n  checkStatus: (uuid: string, callIndex?: number) => Promise<TaskResultStatus>;\n};\n","import API from './api';\nimport type { Session, AtolDriverInterface } from './types';\n\nexport const init = ({\n  session,\n  baseUrl,\n}: {\n  session: Session;\n  baseUrl: string;\n}): AtolDriverInterface => API(session, baseUrl);\n","import axios, { AxiosPromise } from 'axios';\nimport { v1 as buildUUID } from './uuid';\nimport { delay } from './helpers';\nimport {\n  Session,\n  AtolResponce,\n  TaskResultResponce,\n  TaskResultStatus,\n  RequestTypes,\n  AtolDriverInterface,\n} from './types';\n\nconst DEFAULT_BASE_URL = 'http://127.0.0.1:16732';\nconst MAX_CALLS = 3;\nconst DELAY_BETWEEN_CALLS = 500;\n\nexport default (\n  session: Session,\n  baseURL: string = DEFAULT_BASE_URL,\n): AtolDriverInterface => {\n  const API = axios.create({\n    baseURL,\n    timeout: 1000,\n  });\n\n  const { operator } = session;\n\n  const post = (uuid: string, request: unknown): AxiosPromise<AtolResponce> => {\n    return API.post('/api/v2/request', { uuid, request });\n  };\n\n  const get = (uuid: string): AxiosPromise<TaskResultResponce> => {\n    return API.get(`/api/v2/request/${uuid}`);\n  };\n\n  /*\n   * Открытие смены\n   */\n  const openShift = (): AxiosPromise<AtolResponce> => {\n    const uuid = buildUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.openShift],\n        operator,\n      },\n    ]);\n  };\n\n  /*\n   * Закрытие смены\n   */\n  const closeShift = (): AxiosPromise<AtolResponce> => {\n    const uuid = buildUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.closeShift],\n        operator,\n      },\n    ]);\n  };\n\n  const checkStatus = async (\n    uuid: string,\n    callIndex = 0,\n  ): Promise<TaskResultStatus> => {\n    try {\n      const {\n        data: { results },\n      } = await get(uuid);\n      const status = results?.[0]?.status;\n\n      if (callIndex >= MAX_CALLS) {\n        throw new Error('MAX_CALLS LIMIT!');\n      }\n\n      if (status !== TaskResultStatus['ready']) {\n        await delay(DELAY_BETWEEN_CALLS);\n        return checkStatus(uuid, callIndex + 1);\n      }\n      return status;\n    } catch (error) {\n      return TaskResultStatus['error'];\n    }\n  };\n\n  return { openShift, closeShift, checkStatus };\n};\n"],"names":["rnds8Pool","Uint8Array","poolPtr","length","rng","crypto","getRandomValues","slice","_nodeId","_clockseq","byteToHex","i","push","toString","substr","stringify","arr","offset","uuid","toLowerCase","REGEX","test","validate","TypeError","_lastMSecs","_lastNSecs","v1","options","buf","b","Array","node","clockseq","undefined","seedBytes","random","msecs","Date","now","nsecs","dt","Error","tl","tmh","n","TaskResultStatus","RequestTypes","_a","session","baseURL","API","axios","create","timeout","operator","post","request","get","checkStatus","callIndex","results","_b","status_1","status","time","Promise","resolve","setTimeout","openShift","buildUUID","type","closeShift"],"mappings":"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"}