{"version":3,"file":"index.umd.min.js","sources":["../src/tests.ts","../src/types.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["/**\n * @jest-environment node\n */\n\nimport nock from 'nock';\nimport type { Session, AtolDriverInterface } from './types';\nimport { init } from '.';\n\nnock.disableNetConnect();\n\nconst BASE_URL = 'http://127.0.0.1:16732';\n\nconst SESSION: Session = {\n  operator: {\n    name: 'Иванов',\n    vatin: '123654789507',\n  },\n};\n\nconst Atol: AtolDriverInterface = init({\n  session: SESSION,\n  baseUrl: BASE_URL,\n});\n\nconst delay = (time: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, time));\n\nexport { Atol, nock, BASE_URL, SESSION, delay };\n","import type { AxiosPromise } from 'axios';\n\nexport type AtolResponce = { uuid: string };\n\nexport enum TaskResultStatus {\n  ready = 'ready',\n  error = 'error',\n  wait = 'wait',\n  inProgress = 'inProgress',\n  interrupted = 'interrupted',\n  blocked = 'blocked',\n  canceled = 'canceled',\n}\n\nexport enum RequestTypes {\n  openShift = 'openShift',\n  closeShift = 'closeShift',\n}\n\nexport type TaskResultResponce = {\n  results: {\n    error: {\n      code: number;\n      description: string;\n    };\n    status: TaskResultStatus;\n  }[];\n};\n\nexport type Session = {\n  operator: {\n    name: string;\n    vatin: string;\n  };\n};\n\nexport type AtolDriverInterface = {\n  openShift: () => AxiosPromise<AtolResponce>;\n  closeShift: () => AxiosPromise<AtolResponce>;\n  checkStatus: (uuid: string, callIndex?: number) => Promise<TaskResultStatus>;\n};\n","import axios, { AxiosPromise } from 'axios';\nimport { v1 as timestampUUID } from 'uuid';\nimport { delay } from './tests';\nimport {\n  Session,\n  AtolResponce,\n  TaskResultResponce,\n  TaskResultStatus,\n  RequestTypes,\n  AtolDriverInterface,\n} from './types';\n\nconst DEFAULT_BASE_URL = 'http://127.0.0.1:16732';\nconst MAX_CALLS = 3;\nconst DELAY_BETWEEN_CALLS = 500;\n\nexport default (\n  session: Session,\n  baseURL: string = DEFAULT_BASE_URL,\n): AtolDriverInterface => {\n  const API = axios.create({\n    baseURL,\n    timeout: 1000,\n  });\n\n  const { operator } = session;\n\n  const post = (uuid: string, request: unknown): AxiosPromise<AtolResponce> => {\n    return API.post('/api/v2/request', { uuid, request });\n  };\n\n  const get = (uuid: string): AxiosPromise<TaskResultResponce> => {\n    return API.get(`/api/v2/request/${uuid}`);\n  };\n\n  /*\n   * Открытие смены\n   */\n  const openShift = (): AxiosPromise<AtolResponce> => {\n    const uuid = timestampUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.openShift],\n        operator,\n      },\n    ]);\n  };\n\n  /*\n   * Закрытие смены\n   */\n  const closeShift = (): AxiosPromise<AtolResponce> => {\n    const uuid = timestampUUID();\n    return post(uuid, [\n      {\n        type: RequestTypes[RequestTypes.closeShift],\n        operator,\n      },\n    ]);\n  };\n\n  const checkStatus = async (\n    uuid: string,\n    callIndex = 0,\n  ): Promise<TaskResultStatus> => {\n    try {\n      const {\n        data: { results },\n      } = await get(uuid);\n      const status = results?.[0]?.status;\n\n      if (callIndex >= MAX_CALLS) {\n        throw new Error('MAX_CALLS LIMIT!');\n      }\n\n      if (status !== TaskResultStatus['ready']) {\n        await delay(DELAY_BETWEEN_CALLS);\n        return checkStatus(uuid, callIndex + 1);\n      }\n      return status;\n    } catch (error) {\n      return TaskResultStatus['error'];\n    }\n  };\n\n  return { openShift, closeShift, checkStatus };\n};\n","import API from './api';\nimport type { Session, AtolDriverInterface } from './types';\n\nexport const init = ({\n  session,\n  baseUrl,\n}: {\n  session: Session;\n  baseUrl: string;\n}): AtolDriverInterface => API(session, baseUrl);\n"],"names":["disableNetConnect","TaskResultStatus","RequestTypes","init","session","operator","name","vatin","baseUrl","_a","baseURL","API","axios","create","timeout","post","uuid","request","get","checkStatus","callIndex","results","_b","status_1","status","Error","time","Promise","resolve","setTimeout","openShift","timestampUUID","type","closeShift"],"mappings":";;;;;;;;;;;;;;;;;;;;w1CAQKA,oBAEL,ICNYC,EAUAC,EDKsBC,EAAK,CACrCC,QARuB,CACvBC,SAAU,CACRC,KAAM,SACNC,MAAO,iBAMTC,QAXe,4BCNjB,SAAYP,GACVA,gBACAA,gBACAA,cACAA,0BACAA,4BACAA,oBACAA,sBAPF,CAAYA,IAAAA,OAUZ,SAAYC,GACVA,wBACAA,0BAFF,CAAYA,IAAAA,OCFZ,ICTaC,EAAO,SAACM,GAMM,gBDQzBL,EACAM,gBAAAA,EANuB,0BAQvB,IAAMC,EAAMC,UAAMC,OAAO,CACvBH,UACAI,QAAS,MAGHT,EAAaD,WAEfW,EAAO,SAACC,EAAcC,GAC1B,OAAON,EAAII,KAAK,kBAAmB,CAAEC,OAAMC,aAGvCC,EAAM,SAACF,GACX,OAAOL,EAAIO,IAAI,mBAAmBF,IA6B9BG,EAAc,SAClBH,EACAI,uBAAAA,oGAKM,gCAAMF,EAAIF,WAGd,GAJUK,EACNC,sBACEC,YAASF,MAAAA,SAAAA,EAAU,yBAAIG,OAEzBJ,GA1DQ,EA2DV,MAAM,IAAIK,MAAM,2BAGdF,IAAWtB,EAAwB,gBFnD9ByB,EEVa,IFW1B,IAAIC,SAAQ,SAACC,GAAY,OAAAC,WAAWD,EAASF,eEoDvC,OADAJ,YACOH,EAAYH,EAAMI,EAAY,WAEvC,SAAOG,UAEP,mBAAOtB,EAAwB,wBFzDvB,IAACyB,SE6Db,MAAO,CAAEI,UA/CS,WAChB,IAAMd,EAAOe,OACb,OAAOhB,EAAKC,EAAM,CAChB,CACEgB,KAAM9B,EAAaA,EAAa4B,WAChCzB,eA0Cc4B,WAlCD,WACjB,IAAMjB,EAAOe,OACb,OAAOhB,EAAKC,EAAM,CAChB,CACEgB,KAAM9B,EAAaA,EAAa+B,YAChC5B,eA6B0Bc,eC5EPR"}